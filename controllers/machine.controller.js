// controllers/machine.controller.js
const machineService = require('../services/machine.service');

const handleErrors = (res, error) => {
    console.error("!!! SERVER ERROR DETAILS:", error); // Log the error details for debugging
  const message = error.message;
  if (message.includes('Validation error')) return res.status(400).send({ message });
  if (message.includes('already taken')) return res.status(409).send({ message });
  if (message.includes('not found')) return res.status(404).send({ message });
  return res.status(500).send({ message: "An unexpected error occurred." });
};

exports.create = async (req, res) => {
  try {
    const machine = await machineService.createMachine(req.body);
    res.status(201).send(machine);
  } catch (error) {
    handleErrors(res, error);
  }
};

// controllers/machine.controller.js

exports.findAll = async (req, res) => {
  try {
    // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô query param
    const ownerId = req.userId; 
    
    const machines = await machineService.getAllMachines(ownerId);
    res.status(200).send(machines);
  } catch (error) {
    handleErrors(res, error); // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleErrors ‡∏≠‡∏¢‡∏π‡πà
  }
};

// controllers/machine.controller.js

exports.findOne = async (req, res) => {
  try {
    const machine = await machineService.getMachineById(req.params.id);

    if (!machine) {
        return res.status(404).send({ message: "Machine not found." });
    }

    // --- üîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ---
    if (machine.ownerId !== req.userId) {
        return res.status(403).send({ message: "Forbidden: You do not have permission to access this resource." });
    }
    // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ---

    res.status(200).send(machine);
  } catch (error) {
    handleErrors(res, error);
  }
};

// controllers/machine.controller.js

exports.update = async (req, res) => {
  try {
    const machineId = req.params.id;
    
    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô
    const machineToUpdate = await machineService.getMachineById(machineId);

    if (!machineToUpdate) {
        return res.status(404).send({ message: "Machine not found." });
    }

    // 2. --- üîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ---
    if (machineToUpdate.ownerId !== req.userId) {
        return res.status(403).send({ message: "Forbidden: You do not have permission to modify this resource." });
    }
    // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ---

    // 3. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á ‡∏à‡∏∂‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const updatedMachine = await machineService.updateMachine(machineId, req.body);
    res.status(200).send(updatedMachine);

  } catch (error) {
    handleErrors(res, error);
  }
};

// controllers/machine.controller.js

exports.delete = async (req, res) => {
  try {
    const machineId = req.params.id;

    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô
    const machineToDelete = await machineService.getMachineById(machineId);

    if (!machineToDelete) {
      return res.status(404).send({ message: "Machine not found." });
    }

    // 2. --- üîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ---
    if (machineToDelete.ownerId !== req.userId) {
      return res.status(403).send({ message: "Forbidden: You do not have permission to delete this resource." });
    }
    // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ---

    // 3. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á ‡∏à‡∏∂‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö
    const result = await machineService.deleteMachine(machineId);
    res.status(200).send({ message: "Machine deleted successfully." });

  } catch (error) {
    handleErrors(res, error); // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleErrors ‡∏≠‡∏¢‡∏π‡πà
  }
};