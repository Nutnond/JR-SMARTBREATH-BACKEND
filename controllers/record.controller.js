// controllers/record.controller.js
const recordService = require('../services/record.service');
const machineService = require('../services/machine.service');
const handleErrors = (res, error) => {
  // üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
  console.error("!!! SERVER ERROR DETAILS:", error); 

  const message = error.message;
  if (message.includes('Validation error')) return res.status(400).send({ message });
  if (message.includes('already in use') || message.includes('already taken')) return res.status(409).send({ message });
  if (message.includes('not found')) return res.status(404).send({ message });
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏π‡∏ó‡∏µ‡πà log
  return res.status(500).send({ 
    message: "An unexpected error occurred. Please check server logs.",
    // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á error message ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏µ‡∏ö‡∏±‡∏Å
    error: message 
  });
};

exports.create = async (req, res) => {
  try {
    const { machineId, spo2, fev1, fvc, pef } = req.body;
    if (!machineId || !spo2 || !fev1 || !fvc || !pef) {
      return res.status(400).send({ message: "All fields are required!" });
    }
    const record = await recordService.createRecord(req.body);
    const machine = await machineService.touchMachine(machineId)
    res.status(201).send(record);
  } catch (error) {
    handleErrors(res, error);
  }
};

exports.findOne = async (req, res) => {
  try {
    const recordId = req.params.id;

    // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Record ‡∏à‡∏≤‡∏Å ID
    const record = await recordService.getRecordById(recordId);

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Record ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!record) {
      return res.status(404).send({ message: "Record not found." });
    }

    // 3. ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (Authorization)
    // - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å machineId ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô record
    // - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö user ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const machine = await machineService.getMachineById(record.machineId);
    
    if (!machine || machine.ownerId !== req.userId) {
      return res.status(403).send({ message: "Forbidden: You can only view records for your own machines." });
    }

    // 4. ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    res.status(200).send(record);
    
  } catch (error) {
    handleErrors(res, error);
  }
};

// controllers/record.controller.js

exports.findAll = async (req, res) => {
  try {
    const { machineId } = req.query;
    if (!machineId) {
      return res.status(400).send({ message: "Query parameter 'machineId' is required." });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á + ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
    const machine = await machineService.getMachineById(machineId);
    if (!machine) return res.status(404).send({ message: "Machine not found." });
    if (machine.ownerId !== req.userId) {
      return res.status(403).send({ message: "Forbidden: You can only view records for your own machines." });
    }

    // ---- Pagination & Filters ----
    const page = Math.max(parseInt(req.query.page, 10) || 1, 1);
    const pageSizeRaw = parseInt(req.query.pageSize, 10) || 10;
    const pageSize = Math.min(Math.max(pageSizeRaw, 1), 100);

    // ‚úÖ UPDATED: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Sort ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏° Model
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° 'measuredAt' ‡πÅ‡∏•‡∏∞ 'updatedAt' ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡πÅ‡∏•‡∏∞‡∏•‡∏ö 'fev1Fvc' (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô generated field)
    const allowedSort = new Set(['measuredAt', 'createdAt', 'updatedAt', 'spo2', 'fev1', 'fvc', 'pef', 'id']);
    
    // ‚úÖ UPDATED: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ Default Sort ‡πÄ‡∏õ‡πá‡∏ô 'measuredAt' ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏ß‡πà‡∏≤
    const sortBy = allowedSort.has(req.query.sortBy) ? req.query.sortBy : 'measuredAt';
    const order = (req.query.order || 'desc').toLowerCase() === 'asc' ? 'asc' : 'desc';

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ISO string ‡∏´‡∏£‡∏∑‡∏≠ yyyy-MM-dd
    const from = req.query.from ? new Date(req.query.from) : null;
    const to = req.query.to ? new Date(req.query.to) : null;

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å service ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
    const result = await recordService.getRecordsPaginated(machineId, {
      page,
      pageSize,
      sortBy,
      order,
      from,
      to,
    });

    res.send(result);
  } catch (error) {
    handleErrors(res, error);
  }
};

