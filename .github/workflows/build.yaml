name: CI Build & Push to Docker Hub

on:
  push:
    branches: ["master"]
    tags:
      - "v*.*.*"   # push tag ตามเวอร์ชันด้วย (เช่น v1.2.3)
  pull_request:
    branches: ["master"]

permissions:
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      # ชื่อรูปใน Docker Hub: <username>/<repo-name>
      # ใช้ชื่อ repo จาก GitHub อัตโนมัติ (จะถูกทำเป็น lower-case โดย metadata-action)
      IMAGE:${{ secrets.DOCKERHUB_USERNAME }}/jr-smartbreath

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (ออปชัน) ถ้าคุณมี test/lint อยากให้รันก่อน build
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Run tests
        run: |
          if [ -f package.json ] && jq -e '.scripts.test' package.json > /dev/null; then
            npm test
          else
            echo "No test script. Skipping."
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # สร้าง tag/labels อัตโนมัติ (latest บน main, และ tag/branch/sha)
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
          # ทำชื่อ image เป็น lower-case เพื่อถูกต้องตามกฎ Docker Hub
          flavor: |
            latest=auto
            prefix=
            suffix=
            # convert image/ref เป็น lower-case
            # (metadata-action จะ handle ให้)

      # Build & Push แบบ multi-arch (amd64, arm64)
      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
